Big thanks to the Stratosphere project for providing utilities, datasets and code to process network flows!

--------------------

Implementation of Master's thesis testing of machine learning approaches to evasion of anomaly detection systems.

NOTES TO SELF:

Github and Docker Hub Repositories that are used in this implementation.

Github:
  - https://github.com/neutrinolabs/xrdp.git (A.1)
    A linux OS running remote desktop.
  - https://github.com/stratosphereips/StratosphereLinuxIPS (A.2)
    Behavioral analysis software running on the IPS host.
  - https://github.com/stratosphereips/StratosphereTestingFramework (A.2)
    Stratosphere Testing Framework, for generating models of benign behavior and methods for using them with anomaly detection.

Other External Software:
  - http://qosient.com/argus/src/argus-clients-3.0.8.2.tar.gz (B.1)
    Argus Clients - Audit Record Generation and Utilization System
    Network traffic tracing and reporting
  - https://discordapp.com/api/download?platform=linux&format=tar.gz (B.2)
    Discord client for linux.

APT binaries used for Slips Dockerfile:
apt-utils software-properties-common net-tools git python2.7 iptables wget curl wireshark-common tshark tcpdump libpcap0.8-dev flex bison make vim build-essential gcc libncurses5-dev libncurses5-dev make libgeoip-dev zlib1g-dev libreadline7 libreadline6-dev libbsd-dev libwrap0-dev

APT binaries used for argus-rdp-client Dockerfile
net-tools iptables argus-client argus-server python2.7 python3.6 python3.7 python3-pip software-properties-common wget curl wireshark-common tshark tcpdump libpcap0.8-dev flex bison make vim build-essential gcc libncurses5-dev libncurses5-dev make libgeoip-dev zlib1g-dev libreadline7 libreadline6-dev libbsd-dev libwrap0-dev

python-pip packages used for argus-rdp-client Dockerfile:
discord asyncio aiohttp

Setup the infrastructure by issuing the following commands in the root of this repository:

docker build -t ips1 IPS/Stratosphere/
docker build -t argus-rdp-client ubuntu-xrdp/
docker-compose up -d

This should setup the necessary infrastructure required for container ips1 to read network flows from container argus-rdp-client, assuming dependencies and configuration is up-to-date.

To obtain the network logs on ips1, two steps are necessary.
1. Activate network flow recording agent on the argus-rdp-client by issuing the following command:
argus -P 561
# This runs argus using the default configuration as defined in /etc/argus.conf, exopsing traffic on port 561.

2. On ips1, read network flow traffic generated by the argus instance at argus-rdp-client (-S), by reading it from a stored file (-r). Ra output can be written to a target file piped to another program:
root@ips1:/home/ubuntu/StratosphereLinuxIPS# ra -F ra.conf -n -Z b [-S 172.19.0.3 | -r ../flowdata/network_flow_file.pcap] [-w ../flowdata/] [| python2.7 slips.py -f models -d]

If using slips to detect anomalies, be aware that the parameters submitted through argus must correspond to the ones submitted in the slips configuration file slips.conf.


#TODO Create documentation on stratosphere testing framework for working with custom models.
