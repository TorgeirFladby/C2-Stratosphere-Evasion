import time, sys, os, random
from scapy.all import *


zbot = rdpcap("2014-02-07_capture-win3.pcap")

#wrpcap("2016-01-12-capture_win7-modified.pcap", newpcap)


def redefine_networkflows(tw_threshold, packets, src, dst):

    incr = 0

    in_flow = False
    t0 = 0
    last_packet_in_flow = packets[0]
    #Initial flow timer value that will cause same_flow()'s first query to return False.
    last_packet_in_flow.time = -999999
    timestamp = packets[1].time
    counter = 0
    print(timestamp)
    for packet in packets[1:]:
        #print("Found packet: ", packet.show())
        counter+=1
        actual_timestamp = packet.time
        timestamp = actual_timestamp + incr
        if IP in packet:

            if not in_flow and (packet[IP].src == src and packet[IP].dst == dst):
                # New connection to c2 server. Not in a flow, so start a new flow.
                t0 = packet.time
                timestamp += incr
                #print("T_0 : ", t0)
                in_flow = True
                last_packet_in_flow = packet
                packet.time = timestamp
            elif in_flow and (packet[IP].src == src and packet[IP].dst == dst):
                incr += random.uniform(1, 5)
                timestamp += incr
                print("Incremented from T_0: %d to T_n: %d, incremented by %d", packet.time, timestamp, incr)
                # Check if this flow will exceed the threshold. If so, set flow determinator to False.
                if not same_flow(tw_threshold, t0, packet.time):
                    in_flow = False
                    t0 = packet.time

                last_packet_in_flow = packet
                packet.time = timestamp

            elif not in_flow and (packet[IP].src == src and packet[IP].dst == dst):
                # request is outside flow threshold. Create a new flow and don't increment timer.
                in_flow = True
                t0 = packet.time
                timestamp += incr
                #print("T_0 : ", t0)
                last_packet_in_flow = packet
                packet.time = timestamp
            elif in_flow and (packet[IP].src == src and packet[IP].dst == dst):
                incr += random.uniform(1, 5)
                timestamp += incr
                print("Incremented from T_0: %d to T_n: %d, incremented by %d" % (packet.time, timestamp, incr))
                if not same_flow(tw_threshold, t0, timestamp):
                    in_flow = False
                    t0 = packet.time

                last_packet_in_flow = packet
                packet.time = timestamp

            else:
                packet.time = timestamp + incr
        else:
            packet.time = timestamp + incr
        wrpcap('modified.pcap', packet, append=True)

def same_flow(tw_threshold, t0, t_n):
    #print("Difference: ", t_n - t0)
    return (t_n - t0) < tw_threshold

redefine_networkflows(30, zbot, '10.0.2.103', '8.8.8.8')


"""
Using original binetflow file, Slips gives the following output for malicious DNS connections:
    DstIP: 8.8.8.8,
    Label: From-Botnet-UDP-DNS-DGA-17 ,
    Detection Time: 1970-01-01 01:34:18.872789,
    State(100 max): 44.R+R.U.u.a.a.d.a.d.a.a.d.d.a.d.a.a.a.d.a.a.a.a.a.a.a.d.d.a.a.a.a.a.a.a.a.a.a.d.d.a.a.d.a.d.a.a.d.d

Using the binetflow file with modified duration parameters, Slips gives the following output for malicious DNS connections:
    DstIP: 8.8.8.8,
    Label: 0 ,
    Detection Time: 1970-01-01 06:01:46.305854,
    State(100 max): 55,S+S,v,v.s,B,e,s.v,B,B,E,v.B,v.B,s,b,E,B,s,s,s,s,s,B,v,E,s,s,B,s.b.B.s,s,s,s,E,v,s,B,v,B.v,b,s,E,v
"""
